{"version":3,"sources":["components/Common/Button.jsx","components/Common/Input.jsx","utils/consts.js","utils/history.js","components/OnBoard/OnBoard.jsx","components/Game/styled.js","components/Game/utils.js","components/Game/Controls.jsx","components/Game/Cell.jsx","components/Game/Grid.jsx","components/Game/VirtualGrid.jsx","components/Game/Game.jsx","App.jsx","index.js"],"names":["Btn","styled","button","Button","label","onClick","disabled","type","style","defaultProps","Input","input","FieldLabel","FieldTitle","span","InputField","title","inputProps","ROUTES","history","createBrowserHistory","OnBoard","useHistory","padding","maxWidth","href","rel","target","marginTop","push","GameLayout","div","ControlsLayout","StyledControls","StyledGrid","width","StyledCell","color","$revealed","MODES","CELL_STATE","defaultSettings","height","mines","isSuperman","validateSettings","settings","Number","formatSettings","getCellNeighbors","xCor","yCor","reduce","validNeighbors","nearByX","nearByY","neighborXcor","neighborYcor","getMappedGridData","emptyGrid","emptyRow","Array","fill","map","getEmptyGridData","gridInitalState","row","minesCordinates","grid","updatedGrid","forEach","Infinity","updateNeighborsMinesCount","possibleCordinates","length","randomX","Math","floor","random","randomY","generateMinesCordinates","getNeighborsToReveal","gridState","filter","isHidden","isFlagged","hash","x","y","Controls","mode","onNewGame","usedFlags","toggleVirtual","isVirtual","useState","setSettings","handleInput","e","fieldName","value","onChange","placeholder","MemoCell","React","memo","minesCount","state","corX","corY","fontWeight","getDisplayElement","prevProps","nextProps","Grid","gridData","onCellClick","cells","key","VirtualGrid","window","innerHeight","innerWidth","min","cellRenderer","rowIndex","columnIndex","columnCount","rowCount","columnWidth","rowHeight","margin","initialState","flags","Map","isShiftDown","isVirtualGrid","ACTIONS","reducer","payload","mappedGrid","newState","revealedData","isFlagRemoved","size","alert","cordinates","newGridState","newFlagsState","flagHash","delete","set","handleFlags","neighborsToReveal","alreadyChecked","newNighbors","neighbors","realNewNeighbors","cor","has","revealCells","didLose","Game","useReducer","dispath","handleNewGame","errorMessage","newSettings","useEffect","from","values","every","flagXcor","flagYcor","checkIfWon","handleCellClick","handleKeyDown","handleKeyUp","addEventListener","removeEventListener","App","path","to","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.022d648e.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components/macro';\n\nconst Btn = styled.button`\n  display: block;\n  height: 3rem;\n  padding: 0.5rem 2rem;\n  border-left: solid 6px var(--main-color);\n  color: var(--main-color);\n  font-weight: bold;\n\n  :disabled {\n    cursor: not-allowed;\n    color: #b5b5b5;\n    background-color: #e6e6e6;\n  }\n\n  :active {\n    transform: translateY(2px);\n  }\n`;\n\nexport const Button = ({ label, onClick, disabled = false, type = 'button', style }) => (\n  <Btn onClick={onClick} disabled={disabled} type={type} style={style}>\n    {label}\n  </Btn>\n);\n\nButton.defaultProps = {\n  onClick: () => {},\n};\n\nButton.propTypes = {\n  onClick: PropTypes.func,\n  disabled: PropTypes.bool,\n  label: PropTypes.string,\n  type: PropTypes.string,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components/macro';\n\nexport const Input = styled.input`\n  padding: 0 1.5rem;\n  height: 2.5rem;\n  width: 5rem;\n\n  ::placeholder {\n    color: #ababab;\n  }\n\n  :disabled {\n    color: #c7c7c7;\n    background-color: #f6f6f6;\n  }\n`;\n\nexport const FieldLabel = styled.label`\n  display: block;\n  padding: 0;\n  margin: 0;\n`;\n\nexport const FieldTitle = styled.span`\n  display: block;\n  margin-bottom: 1rem;\n  font-weight: 500;\n  font-size: 14px;\n  color: #494949;\n`;\n\nexport const InputField = ({ title, ...inputProps }) => {\n  return (\n    <FieldLabel>\n      {title && <FieldTitle>{title}</FieldTitle>}\n      <Input {...inputProps} />\n    </FieldLabel>\n  );\n};\n\nInputField.propTypes = {\n  title: PropTypes.string,\n};\n","export const ROUTES = {\n  BASE: '/MineSweeper/',\n  PLAY: '/MineSweeper/play',\n};\n","import { createBrowserHistory } from 'history';\n\nexport const history = createBrowserHistory();\n","import React from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { Button } from '../Common';\nimport { ROUTES } from '../../utils';\n\nconst OnBoard = () => {\n  const history = useHistory();\n\n  return (\n    <div style={{ padding: '3rem' }}>\n      <h1>Welcome to Minesweeper</h1>\n      <p style={{ maxWidth: '80rem' }}>\n        If you're a Windows' user chances are that you already have the game on your computer. This\n        guide will help you in completing your first game. The rule of the game is simple, the\n        number on a block shows the number of mines adjacent to it and you have to flag all the\n        mines.\n      </p>\n      <h4>Few Game Rules:</h4>\n      <ul>\n        <li>\n          <strong>Flag:</strong> Put a flag in a zone when you have confirmed that there is a mine.\n        </li>\n        <li>\n          <strong>Superman:</strong> Play new game with all cells revealed!\n        </li>\n        <li>\n          <strong>Rest:</strong> Click it if you want to reset the game\n        </li>\n      </ul>\n      <a\n        href=\"https://www.instructables.com/id/How-to-play-minesweeper/\"\n        rel=\"noopener noreferrer\"\n        target=\"_blank\"\n      >\n        For more information about Minesweeper\n      </a>\n      <Button\n        label=\"Click to start playing\"\n        style={{ marginTop: '2rem' }}\n        onClick={() => history.push(ROUTES.PLAY)}\n      />\n      <p style={{ marginTop: '2rem' }}>Made by Eylon Mizrahi</p>\n    </div>\n  );\n};\n\nexport default OnBoard;\n","import styled from 'styled-components/macro';\n\nexport const GameLayout = styled.div``;\n\nexport const ControlsLayout = styled.div`\n  width: 400px;\n  margin: 5rem auto;\n`;\n\nexport const StyledControls = styled.div`\n  display: flex;\n  justify-content: space-around;\n  margin-bottom: 2rem;\n`;\n\nexport const StyledGrid = styled.div`\n  display: grid;\n  grid-template-columns: repeat(${({ width }) => width}, auto);\n  justify-content: center;\n  overflow: scroll;\n`;\n\nexport const StyledCell = styled.button`\n  width: 3rem;\n  height: 3rem;\n  text-align: center;\n  border: 1px solid black;\n  background-color: ${({ color }) => color};\n  opacity: ${({ $revealed }) => ($revealed ? 0.5 : 0.8)};\n`;\n","export const MODES = {\n  PLAYING: 'playing',\n  LOST: 'lost',\n  WON: 'won',\n};\n\nexport const CELL_STATE = {\n  REVEALED: 1,\n  HIDDEN: 0,\n  FLAGGED: -1,\n};\n\nexport const defaultSettings = { width: 50, height: 50, mines: 200, isSuperman: false };\n\nconst formatSettings = ({ width, height, mines, isSuperman }) => {\n  return { width: Number(width), height: Number(height), mines: Number(mines), isSuperman };\n};\n\nexport const validateSettings = (settings) => {\n  const { width, height, mines, isSuperman } = formatSettings(settings);\n  const isValidWidth = width > 0 && width <= 300;\n  const isValidHeight = height > 0 && height <= 300;\n  const isValidMines = mines > 0 && mines <= width * height;\n  const isValid = isValidWidth && isValidHeight && isValidMines;\n  const error = isValid ? false : 'Allowed Settings: Height, Width up to 300, mines up to 90,000';\n  return [error, { width, height, mines, isSuperman }];\n};\n\nexport const getEmptyGridData = ({ width, height }) => {\n  const emptyRow = Array(width).fill(0);\n  const emptyGrid = Array(height)\n    .fill(null)\n    .map(() => [...emptyRow]);\n  return emptyGrid;\n};\n\nexport const generateMinesCordinates = ({ width, height, mines }) => {\n  const minesCordinates = [];\n  const possibleCordinates = {};\n  while (minesCordinates.length < mines) {\n    const randomX = Math.floor(Math.random() * width);\n    const randomY = Math.floor(Math.random() * height);\n    const isTakenSpace = possibleCordinates[randomX] && possibleCordinates[randomX][randomY];\n    if (!isTakenSpace) {\n      possibleCordinates[randomX] = { ...possibleCordinates[randomX], [randomY]: true };\n      minesCordinates.push([randomX, randomY]);\n    }\n  }\n  return minesCordinates;\n};\n\nconst getCellNeighbors = ([xCor, yCor], { width, height }) => {\n  const nearBy = [\n    [-1, -1],\n    [-1, 0],\n    [-1, 1],\n    [0, -1],\n    [0, 1],\n    [1, -1],\n    [1, 0],\n    [1, 1],\n  ];\n  const neighbors = nearBy.reduce((validNeighbors, [nearByX, nearByY]) => {\n    const neighborXcor = xCor + nearByX;\n    const neighborYcor = yCor + nearByY;\n    const inXrange = neighborXcor >= 0 && neighborXcor < width;\n    const inYrange = neighborYcor >= 0 && neighborYcor < height;\n    if (inXrange && inYrange) {\n      return [...validNeighbors, [neighborXcor, neighborYcor]];\n    } else {\n      return validNeighbors;\n    }\n  }, []);\n  return neighbors;\n};\n\nconst updateNeighborsMinesCount = (minesCordinates, grid, settings) => {\n  const updatedGrid = grid.map((row) => [...row]);\n  minesCordinates.forEach(([xCor, yCor]) => {\n    updatedGrid[yCor][xCor] = Infinity;\n    const neighbors = getCellNeighbors([xCor, yCor], settings);\n    neighbors.forEach(\n      ([neighborXcor, neighborYcor]) => (updatedGrid[neighborYcor][neighborXcor] += 1),\n    );\n  });\n  return updatedGrid;\n};\n\nexport const getMappedGridData = (settings) => {\n  const emptyGrid = getEmptyGridData(settings);\n  const gridInitalState = emptyGrid.map((row) => [...row]);\n  const minesCordinates = generateMinesCordinates(settings);\n  const mappedGrid = updateNeighborsMinesCount(minesCordinates, emptyGrid, settings);\n  return [mappedGrid, gridInitalState];\n};\n\nconst getNeighborsToReveal = ([xCor, yCor], { gridState, settings }) => {\n  const neighbors = getCellNeighbors([xCor, yCor], settings);\n  const neighborsToReveal = neighbors.filter(([neighborXcor, neighborYcor]) => {\n    const isHidden = gridState[neighborYcor][neighborXcor] === CELL_STATE.HIDDEN;\n    const isFlagged = gridState[neighborYcor][neighborXcor] === CELL_STATE.FLAGGED;\n    return isHidden && !isFlagged;\n  });\n  return neighborsToReveal;\n};\n\nexport const hash = ([x, y]) => 0.5 * (x + y) * (x + y + 1) + y;\n\nexport const revealCells = (neighborsToReveal = [[]], { gridData, gridState, settings }) => {\n  const newGridState = gridState.map((row) => [...row]);\n\n  const alreadyChecked = new Map();\n  while (neighborsToReveal.length > 0) {\n    const newNighbors = [];\n    neighborsToReveal.forEach(([corX, corY]) => {\n      newGridState[corY][corX] = CELL_STATE.REVEALED;\n      if (gridData[corY][corX] > 0) return;\n\n      const neighbors = getNeighborsToReveal([corX, corY], {\n        gridState: newGridState,\n        settings,\n      });\n\n      const realNewNeighbors = neighbors.filter((cor) => !alreadyChecked.has(hash(cor)));\n\n      newNighbors.push(...realNewNeighbors);\n      neighbors.forEach((cor) => alreadyChecked.set(hash(cor), true));\n    });\n\n    neighborsToReveal = newNighbors;\n  }\n  return newGridState;\n};\n\nexport const checkIfWon = (flags = new Map(), gridData = [[]]) =>\n  Array.from(flags.values()).every(\n    ([flagXcor, flagYcor]) => gridData[flagYcor][flagXcor] === Infinity,\n  );\n\nexport const handleFlags = ({\n  flags = new Map(),\n  gridState = [[]],\n  isFlagRemoved,\n  cordinates: [corX, corY],\n}) => {\n  const newGridState = gridState.map((row) => [...row]);\n  const newFlagsState = new Map(flags);\n  const flagHash = hash([corX, corY]);\n  if (isFlagRemoved) {\n    newFlagsState.delete(flagHash, [corX, corY]);\n    newGridState[corY][corX] = CELL_STATE.HIDDEN;\n  } else {\n    newFlagsState.set(flagHash, [corX, corY]);\n    newGridState[corY][corX] = CELL_STATE.FLAGGED;\n  }\n  return { newGridState, newFlagsState };\n};\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { useHistory } from 'react-router-dom';\nimport { Button, InputField } from '../Common';\nimport { ROUTES } from '../../utils';\nimport { StyledControls, ControlsLayout } from './styled';\nimport { MODES, defaultSettings } from './utils';\n\nconst Controls = ({\n  mode = MODES.PLAYING,\n  onNewGame,\n  usedFlags = 0,\n  mines = 0,\n  toggleVirtual,\n  isVirtual,\n}) => {\n  const history = useHistory();\n  const [settings, setSettings] = useState(defaultSettings);\n\n  const handleInput = (e, fieldName) => {\n    setSettings({ ...settings, [fieldName]: e.target.value });\n  };\n\n  return (\n    <ControlsLayout>\n      <StyledControls>\n        <InputField\n          onChange={(e) => handleInput(e, 'width')}\n          placeholder=\"Grid Width\"\n          title=\"Width:\"\n          value={settings.width}\n        />\n        <InputField\n          onChange={(e) => handleInput(e, 'height')}\n          placeholder=\"Grid Height\"\n          title=\"Height:\"\n          value={settings.height}\n        />\n        <InputField\n          onChange={(e) => handleInput(e, 'mines')}\n          placeholder=\"Mines Amount\"\n          title=\"Mines:\"\n          value={settings.mines}\n        />\n      </StyledControls>\n\n      <StyledControls>\n        <Button\n          label=\"Rules\"\n          onClick={() => history.push(ROUTES.BASE)}\n          disabled={mode === MODES.PLAYING}\n        />\n        <Button label=\"Superman\" onClick={() => onNewGame({ ...settings, isSuperman: true })} />\n        <Button label=\"Reset\" onClick={() => onNewGame(settings)} />\n      </StyledControls>\n      <StyledControls>\n        <div>\n          <span>{`${mines - usedFlags}  🚩 Remaining`}</span>\n        </div>\n        <div>\n          <span>{`${mines} 💣 Total`}</span>\n        </div>\n        <Button label={`Virtual: ${isVirtual ? 'On' : 'Off'}`} onClick={toggleVirtual} />\n      </StyledControls>\n    </ControlsLayout>\n  );\n};\n\nControls.propTypes = {\n  mode: PropTypes.string.isRequired,\n  mines: PropTypes.number.isRequired,\n  usedFlags: PropTypes.number.isRequired,\n  onNewGame: PropTypes.func.isRequired,\n  toggleVirtual: PropTypes.func.isRequired,\n  isVirtual: PropTypes.bool.isRequired,\n};\n\nexport default Controls;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { StyledCell } from './styled';\nimport { CELL_STATE } from './utils';\n\nconst getDisplayElement = (minesCount, state) => {\n  switch (state) {\n    case CELL_STATE.FLAGGED:\n      return '🚩';\n    case CELL_STATE.REVEALED:\n      return minesCount === Infinity ? '💣' : minesCount || '';\n    default:\n      return '';\n  }\n};\n\nconst Cell = ({ minesCount, state, corX, corY, onClick, style }) => {\n  return (\n    <StyledCell\n      style={style}\n      onClick={() => onClick(corX, corY)}\n      disabled={state === CELL_STATE.REVEALED}\n      color={state === CELL_STATE.REVEALED && minesCount === Infinity ? 'red' : 'grey'}\n      $revealed={state === CELL_STATE.REVEALED}\n    >\n      <span style={{ color: minesCount > 1 ? 'red' : 'white', fontWeight: 600 }}>\n        {getDisplayElement(minesCount, state)}\n      </span>\n    </StyledCell>\n  );\n};\n\nconst MemoCell = React.memo(\n  Cell,\n  (prevProps, nextProps) =>\n    prevProps.state === nextProps.state && prevProps.minesCount === nextProps.minesCount,\n);\n\nCell.propTypes = {\n  minesCount: PropTypes.number.isRequired,\n  state: PropTypes.number.isRequired,\n  corX: PropTypes.number.isRequired,\n  corY: PropTypes.number.isRequired,\n  onClick: PropTypes.func.isRequired,\n  style: PropTypes.objectOf(PropTypes.shape).isRequired,\n};\n\nexport default MemoCell;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { StyledGrid } from './styled';\nimport Cell from './Cell';\n\nconst Grid = ({ gridData = [[]], gridState = [[]], width, onCellClick }) => {\n  const cells = gridData.map((row, corY) =>\n    row.map((minesCount, corX) => (\n      <Cell\n        key={`${corX}-${corY}`}\n        minesCount={minesCount}\n        state={gridState[corY][corX]}\n        corX={corX}\n        corY={corY}\n        onClick={onCellClick}\n      />\n    )),\n  );\n  return <StyledGrid width={width}>{cells}</StyledGrid>;\n};\n\nGrid.propTypes = {\n  width: PropTypes.number.isRequired,\n  gridData: PropTypes.arrayOf(PropTypes.arrayOf(PropTypes.number)).isRequired,\n  gridState: PropTypes.arrayOf(PropTypes.arrayOf(PropTypes.number)).isRequired,\n  onCellClick: PropTypes.func.isRequired,\n};\n\nexport default Grid;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Grid } from 'react-virtualized';\nimport Cell from './Cell';\n\nconst VirtualGrid = ({ gridData = [[]], gridState = [[]], onCellClick }) => {\n  const height = window.innerHeight - 400;\n  const width = window.innerWidth;\n  const length = Math.min(height, width);\n  return (\n    <Grid\n      cellRenderer={({ key, rowIndex, columnIndex, style }) => {\n        return (\n          <Cell\n            key={key}\n            style={style}\n            minesCount={gridData[rowIndex][columnIndex]}\n            state={gridState[rowIndex][columnIndex]}\n            corX={columnIndex}\n            corY={rowIndex}\n            onClick={onCellClick}\n          />\n        );\n      }}\n      columnCount={gridData[0].length}\n      rowCount={gridData.length}\n      columnWidth={30}\n      rowHeight={30}\n      height={length}\n      width={length}\n      style={{ margin: '0 auto' }}\n    />\n  );\n};\n\nVirtualGrid.propTypes = {\n  width: PropTypes.number.isRequired,\n  gridData: PropTypes.arrayOf(PropTypes.arrayOf(PropTypes.number)).isRequired,\n  gridState: PropTypes.arrayOf(PropTypes.arrayOf(PropTypes.number)).isRequired,\n  onCellClick: PropTypes.func.isRequired,\n};\n\nexport default VirtualGrid;\n","import React, { useEffect, useReducer } from 'react';\nimport Controls from './Controls';\nimport Grid from './Grid';\nimport VirtualGrid from './VirtualGrid';\nimport { GameLayout } from './styled';\nimport {\n  MODES,\n  defaultSettings,\n  validateSettings,\n  revealCells,\n  getMappedGridData,\n  CELL_STATE,\n  checkIfWon,\n  handleFlags,\n} from './utils';\n\nconst initialState = {\n  mode: MODES.PLAYING,\n  flags: new Map(),\n  settings: defaultSettings,\n  gridData: [[]],\n  gridState: [[]],\n  isShiftDown: false,\n  isVirtualGrid: true,\n};\n\nconst ACTIONS = {\n  NEW_GAME: 'new_game',\n  SHIFT_DOWN: 'shift_down',\n  GAME_MODE: 'game_mode',\n  CELL_CLICK: 'cell_click',\n  TOGGLE_VIRTUAL: 'toggle_virtual',\n};\n\nconst reducer = (state, { type, payload }) => {\n  switch (type) {\n    case ACTIONS.SHIFT_DOWN: {\n      return { ...state, isShiftDown: payload };\n    }\n    case ACTIONS.NEW_GAME: {\n      const settings = payload || state.settings;\n\n      const [mappedGrid, gridInitalState] = getMappedGridData(settings);\n      const newState = {\n        ...initialState,\n        settings,\n        gridData: mappedGrid,\n        gridState: gridInitalState,\n      };\n      if (settings.isSuperman) {\n        const revealedData = gridInitalState.map((row) => row.fill(CELL_STATE.REVEALED));\n        return { ...newState, gridState: revealedData };\n      }\n      return newState;\n    }\n    case ACTIONS.GAME_MODE: {\n      return { ...state, mode: payload };\n    }\n    case ACTIONS.CELL_CLICK: {\n      const [corX, corY] = payload;\n      const { flags, gridData, gridState, settings, isShiftDown, mode } = state;\n\n      if (mode !== MODES.PLAYING) return state;\n      if (!isShiftDown && gridState[corY][corX] === CELL_STATE.FLAGGED) return state;\n      if (isShiftDown) {\n        const isFlagRemoved = gridState[corY][corX] === CELL_STATE.FLAGGED;\n        if (!isFlagRemoved && flags.size === settings.mines) {\n          alert('Cant add any more flags');\n          return state;\n        }\n        const { newGridState, newFlagsState } = handleFlags({\n          flags,\n          gridState,\n          isFlagRemoved,\n          cordinates: [corX, corY],\n        });\n\n        return { ...state, flags: newFlagsState, gridState: newGridState };\n      } else {\n        const newGridState = revealCells([[corX, corY]], state);\n        const didLose = gridData[corY][corX] === Infinity;\n        if (didLose) alert('You Lost');\n\n        return { ...state, gridState: newGridState, mode: didLose ? MODES.LOST : MODES.PLAYING };\n      }\n    }\n    case ACTIONS.TOGGLE_VIRTUAL:\n      return { ...state, isVirtualGrid: !state.isVirtualGrid };\n    default:\n      return state;\n  }\n};\n\nconst Game = () => {\n  const [state, dispath] = useReducer(reducer, initialState);\n  const { flags, gridData, gridState, settings, mode, isVirtualGrid } = state;\n\n  const handleNewGame = (settings = defaultSettings) => {\n    const [errorMessage, newSettings] = validateSettings(settings);\n    if (errorMessage) {\n      alert(errorMessage);\n    } else {\n      dispath({ type: ACTIONS.NEW_GAME, payload: newSettings });\n    }\n  };\n\n  useEffect(handleNewGame, []);\n\n  useEffect(() => {\n    if (flags.size === settings.mines) {\n      const won = checkIfWon(flags, gridData);\n      if (won) {\n        alert('You Won');\n        dispath({ type: ACTIONS.GAME_MODE, payload: MODES.WON });\n      }\n    }\n  }, [flags.size, settings.mines]);\n\n  const handleCellClick = (corX, corY) => {\n    dispath({ type: ACTIONS.CELL_CLICK, payload: [corX, corY] });\n  };\n\n  const toggleVirtual = () => dispath({ type: ACTIONS.TOGGLE_VIRTUAL });\n\n  const handleKeyDown = (e) => {\n    if (e.key === 'Shift') {\n      dispath({ type: ACTIONS.SHIFT_DOWN, payload: true });\n    }\n  };\n\n  const handleKeyUp = (e) => {\n    if (e.key === 'Shift') {\n      dispath({ type: ACTIONS.SHIFT_DOWN, payload: false });\n    }\n  };\n\n  useEffect(() => {\n    window.addEventListener('keydown', handleKeyDown);\n    window.addEventListener('keyup', handleKeyUp);\n    return () => {\n      window.removeEventListener('keydown', handleKeyDown);\n      window.removeEventListener('keyup', handleKeyDown);\n    };\n  }, []);\n\n  return (\n    <GameLayout>\n      <Controls\n        usedFlags={flags.size}\n        mines={settings.mines}\n        mode={mode}\n        onNewGame={handleNewGame}\n        toggleVirtual={toggleVirtual}\n        isVirtual={isVirtualGrid}\n      />\n      {isVirtualGrid ? (\n        <VirtualGrid gridData={gridData} gridState={gridState} onCellClick={handleCellClick} />\n      ) : (\n        <Grid\n          width={settings.width}\n          gridData={gridData}\n          gridState={gridState}\n          onCellClick={handleCellClick}\n        />\n      )}\n    </GameLayout>\n  );\n};\n\nexport default Game;\n","import React from 'react';\nimport { Route, Switch, Redirect } from 'react-router-dom';\nimport { Game, OnBoard } from './components/';\nimport { ROUTES } from './utils';\n\nconst App = () => {\n  return (\n    <Switch>\n      <Route path={ROUTES.PLAY}>\n        <Game />\n      </Route>\n      <Route path={ROUTES.BASE}>\n        <OnBoard />\n      </Route>\n      <Redirect to={ROUTES.BASE} />\n    </Switch>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Router } from 'react-router-dom';\nimport './index.css';\nimport App from './App';\nimport { history } from './utils';\n\nReactDOM.render(\n    <Router history={history}>\n      <App />\n    </Router>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}